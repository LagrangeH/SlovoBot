# !/usr/bin/env python3
# -*- coding: utf-8 -*-
import threading
import time
import traceback
import json

import messages

from random import randrange
from datetime import datetime
from loguru import logger
from vk_api.bot_longpoll import VkBotEventType
from vk_api.utils import get_random_id

from bot_head import BotUtils, SetUniqueVariables, DataBase
from bot_head import long_poll, users, clocks, used_words, vk, vk_session, keyboard_for_word
from bot_head import word_count_without_bug


@logger.catch()
def run():
    logger.info('LongPoll Thread started')
    for event in long_poll.listen():
        try:
            if event.type == VkBotEventType.MESSAGE_NEW and event.from_user:

                db = DataBase()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                response = event.obj.text.lower() if len(event.obj.text) > 0 else ' '   # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                payload = event.obj.payload     # –ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É
                peer_id, user_id = event.obj.peer_id, event.obj.from_id
                bot = BotUtils(event, response, user_id, peer_id, users)
                kb = bot.create_keyboard()
                inline_kb = bot.create_inline_kb(payload)
                # –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - id —é–∑–µ—Ä–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
                users[user_id] = SetUniqueVariables() if users.get(user_id) is None else users[user_id]

                if not payload:
                    if response[:5] == '–Ω–∞–π—Ç–∏':
                        word = response[6:]
                        if db.check_word(word):
                            word_data = db.data_by_word(word)
                            msg = word_data[1].upper() + ' - —ç—Ç–æ\n' + word_data[2]
                            bot.send_message(msg, keyboard_for_word(word_data[1]))
                        else:
                            bot.send_message('–≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –º–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ', kb)
                    elif response[0] == '#':  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å "–∫–∞—Ä—Ç–æ—á–∫—É" —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —é–∑–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –Ω—ë–º
                        try:
                            word = users[user_id].user_diction[int(response[1:]) - 1].capitalize()
                            word += ' - —ç—Ç–æ\n' + db.data_by_word(word)[2]
                            bot.send_message(word, kb)
                        except IndexError:
                            bot.send_message('–≠—Ç–æ —á–∏—Å–ª–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–≤–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ!', kb)
                        except ValueError:
                            bot.send_message('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!', kb)

                elif 'info' in payload:
                    bot.send_message(messages.info, kb)
                elif 'menu' in payload:
                    bot.send_message('–ú–µ–Ω—é', kb)
                elif 'settings' in payload:
                    bot.send_message('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', kb)
                elif "user_dict" in payload:
                    if not users[user_id].user_diction:
                        bot.send_message('–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Å–ª–æ–≤', kb)
                    else:
                        msg = '–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞:\n'
                        for i in range(len(users[user_id].user_diction)):
                            msg += f'{i+1}. {users[user_id].user_diction[i]}\n'
                        bot.send_message(msg, kb)
                elif 'clear_diction' in payload:
                    bot.send_message('–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å?', inline_kb)
                elif 'cleared' in payload:
                    users[user_id].clear_diction()
                    bot.send_message('–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω', kb)

                else:
                    if "not_supported_button" in payload:
                        if "–¥–æ–±–∞–≤–ª–µ–Ω–æ" in payload:
                            word = payload[116:-31]
                            try:
                                add_word = users[user_id].add_to_diction(word)
                            except RuntimeError:
                                bot.send_message('–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ', kb)
                            else:
                                bot.send_message(f"–°–ª–æ–≤–æ ¬´{word.lower()}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π —Å–ª–æ–≤–∞—Ä—å", kb)
                        elif "—É–¥–∞–ª–µ–Ω–æ" in payload:
                            word = payload[116:-32]
                            try:
                                del_word = users[user_id].del_from_diction(word)
                            except RuntimeError:
                                bot.send_message('–≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –±—ã–ª–æ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ', kb)
                            else:
                                bot.send_message(f"–°–ª–æ–≤–æ ¬´{word.lower()}¬ª —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è", kb)
                    else:
                        bot.send_message('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—éüòü', kb)

            elif event.type == VkBotEventType.MESSAGE_EVENT:
                if event.object.payload.get('type') == 'show_snackbar':
                    payload = event.object.payload
                    user_id = event.obj.user_id

                    if '–¥–æ–±–∞–≤–ª–µ–Ω–æ' in payload['text']:  # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
                        word = payload['text'][7:-26]
                        try:
                            add_word = users[user_id].add_to_diction(word)
                        except RuntimeError:
                            payload['text'] = '–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ'

                    elif '—É–¥–∞–ª–µ–Ω–æ' in payload['text']:  # –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —é–∑–µ—Ä–∞
                        word = payload['text'][7:-27]
                        try:
                            del_word = users[user_id].del_from_diction(word)
                        except RuntimeError:
                            payload['text'] = '–≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –±—ã–ª–æ –≤ —Ç–≤–æ—ë–º —Å–ª–æ–≤–∞—Ä–µ'

                    vk_session.messages.sendMessageEventAnswer(
                        event_id=event.object.event_id,
                        user_id=event.object.user_id,
                        peer_id=event.object.peer_id,
                        event_data=json.dumps(payload))

        except:
            logger.error(traceback.format_exc())


@logger.catch()
def timer():
    logger.info('Timer Thread started')
    while True:
        try:
            db = DataBase()
            for user in users.keys():  # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è id —é–∑–µ—Ä–æ–≤
                if users[user].get_timer()['timer_status'] is True:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö —é–∑–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω —Ç–∞–π–º–µ—Ä
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á—ë–º —è–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - –º–∞—Å—Å–∏–≤ —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    clocks[users[user].get_timer()['timer']] = []
                    clocks[users[user].get_timer()['timer']].append(user)

            # –ï—Å–ª–∏ –±–æ—Ç—É –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª
            if clocks == {}:
                time.sleep(3)
                continue

            # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–µ–π –≤—Ä–µ–º–µ–Ω —Ç–∞–π–º–µ—Ä–∞
            cl = []
            for key in clocks.keys():  # –°–æ–∑–¥–∞–¥–∏–º –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
                cl.append(key)
            clocks_array = []
            for i in set(cl):  # –£–ø–æ—Ä—è–¥–æ—á–∏–º –º–∞—Å—Å–∏–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                clocks_array.append(i)

            today = datetime.now()
            current_time = today.hour + today.minute / 100  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh.mm (—Ç–∏–ø - float)

            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ç–∞–π–º–µ—Ä
            for t in clocks_array:
                if current_time <= t:  # –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π —Ç–∞–π–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è
                    time_for_timer = t
                    day = 0  # –°–µ–≥–æ–¥–Ω—è
                    break  # –ú–∞—Å—Å–∏–≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é: –¥–∞–ª—å–Ω–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            else:  # –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π —Ç–∞–π–º–µ—Ä –∑–∞–≤—Ç—Ä–∞
                time_for_timer = clocks_array[0]  # –ù—É–∂–µ–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç.–∫. –º–∞—Å—Å–∏–≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                day = 1  # –ó–∞–≤—Ç—Ä–∞

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞
            if today.day < 30:
                alarm_time = datetime(today.year, today.month, today.day + 1,
                                      int(time_for_timer), int('{:.0f}'.format(time_for_timer % 1 * 100)))
            else:  # –ù–æ–≤—ã–π –º–µ—Å—è—Ü
                if (today.month in [1, 3, 5, 7, 8, 10] and today.day == 31) or today.month in [2, 4, 6, 9, 11]:
                    alarm_time = datetime(today.year, today.month + 1, 1,
                                          int(time_for_timer), int('{:.0f}'.format(time_for_timer % 1 * 100)))
                else:  # –ù–û–í–´–ô –ì–û–û–û–î
                    alarm_time = datetime(today.year + 1, 1, 1,
                                          int(time_for_timer), int('{:.0f}'.format(time_for_timer % 1 * 100)))

            delta_time = (alarm_time - today).total_seconds() // 1

            if (today.month + today.day / 100) not in used_words:
                word_data = db.data_by_id(randrange(0, stop=word_count_without_bug()))
                word_id, word, word_interpretation, first_letter = word_data
                used_words[today.month + today.day / 100] = word_id
            else:
                word_data = db.data_by_id(used_words[today.month + today.day / 100])
                word_id, word, word_interpretation, first_letter = word_data
                used_words[today.month + today.day / 100] = word_id

            message = word.upper() + ' - —ç—Ç–æ\n' + word_interpretation

            time.sleep(delta_time)  # –ñ–¥—ë–º —Ç–∞–π–º–µ—Ä TODO: –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –¥–µ–±–∞–≥–∞ –∑–¥–µ—Å—å

            for user in clocks[time_for_timer]:
                vk.method('messages.send',
                          {'peer_id': user, 'user_id': user,
                           'message': message, 'random_id': get_random_id(),
                           'attachment': None, 'keyboard': keyboard_for_word(word)})
            else:
                logger.info('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

            # time.sleep(delta_time)  # –ñ–¥—ë–º —Ç–∞–π–º–µ—Ä TODO: —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–±–∞–≥–∞
        except:
            logger.error(traceback.format_exc())


if __name__ == '__main__':
    threading.Thread(target=run, name='LongPollThread').start()
    threading.Thread(target=timer, name='TimerThread').start()
